---
import { base } from "astro:config/client";
import data from "../content/data.json";
import Layout from "../layouts/Layout.astro";

// Basis-URL aus astro.config.mjs holen (wichtig f√ºr Pfadberechnungen)
const repo = 'knuspermixx/astro-edit-starter'; // Repository Name f√ºr API Calls

// Daten f√ºr den Client vorbereiten
const initialDataString = JSON.stringify(data); // Als String √ºbergeben
const initialDataForClient = data; // Objekt f√ºr Pfad-Lookup
---

<Layout>
<div id="toolbar" class="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white p-2 flex justify-center space-x-4 rounded shadow-lg z-50 hidden">
  <div>
    <button id="undo" class="px-2 py-1 hover:bg-gray-600 rounded">R√ºckg√§ngig</button>
    <button id="redo" class="px-2 py-1 hover:bg-gray-600 rounded">Wiederholen</button>
  </div>
  <div>
    <button id="publish" class="px-2 py-1 hover:bg-gray-600 rounded">Ver√∂ffentlichen</button>
    <button id="logout" class="px-2 py-1 hover:bg-gray-600 rounded">Abmelden</button>
  </div>
   <div id="status" class="text-sm ml-4 self-center"></div>
</div>

<nav class="py-6 border-b border-gray-200 bg-white">
  <div class="container mx-auto px-6 flex items-center justify-between">
    <div class="text-xl font-bold tracking-tight" contenteditable="false">Logo</div>
    <div class="hidden md:flex space-x-8">
      <a href="#hero" class="hover:underline">Home</a>
      <a href="#about" class="hover:underline">√úber uns</a>
      <a href="#features" class="hover:underline">Features</a>
      <a href="#contact" class="hover:underline">Kontakt</a>
    </div>
  </div>
</nav>

<section id="hero" class="py-20">
  <div class="container mx-auto px-6 flex flex-col md:flex-row items-center">
    <div class="flex flex-col w-full md:w-2/5 justify-center items-start text-center md:text-left">
      <h1 class="text-4xl font-bold leading-tight mt-4" contenteditable="false" data-key="hero.title">{data.hero.title}</h1>
      <p class="leading-relaxed my-6 text-gray-600" contenteditable="false" data-key="hero.subtitle">{data.hero.subtitle}</p>
      <button class="bg-black text-white hover:bg-gray-900 py-2 px-6 transition-colors duration-300 border border-black shadow-none" contenteditable="false" data-key="hero.cta">{data.hero.cta}</button>
    </div>
    <div class="w-full md:w-3/5 py-6 text-center">
      <img class="w-full md:w-4/5 mx-auto border border-gray-200 cursor-pointer" src={data.hero.image} alt="Hero Image" data-key="hero.image" id="img-hero-image" />
      <input type="file" id="input-hero-image" class="hidden" accept="image/*" />
    </div>
  </div>
</section>

<section id="about" class="py-20 bg-gray-50">
  <div class="container mx-auto px-6 flex flex-col md:flex-row items-center md:items-start">
    <div class="w-full md:w-1/3 flex justify-center md:justify-start mb-8 md:mb-0">
      <img src={data.about.image} alt="About Us" class="w-40 h-40 object-cover rounded-full cursor-pointer" data-key="about.image" id="img-about-image"/>
      <input type="file" id="input-about-image" class="hidden" accept="image/*" />
    </div>
    <div class="w-full md:w-2/3 md:pl-12 flex flex-col justify-center">
      <h2 class="text-2xl font-bold mb-4 text-left text-gray-900 tracking-tight uppercase" contenteditable="false" data-key="about.title">{data.about.title}</h2>
      <p class="text-gray-700 mb-2 text-left leading-relaxed max-w-2xl" contenteditable="false" data-key="about.content">{data.about.content}</p>
    </div>
  </div>
</section>

<section id="features" class="py-16">
  <div class="container mx-auto px-6">
    <h2 class="text-3xl font-bold text-center mb-12" contenteditable="false" data-key="features.0.title">Unsere Features</h2>
    <div id="features-list" class="flex flex-wrap -mx-6">
      {data.features.map((feature, index) => (
        <div class="w-full md:w-1/3 p-6 feature-item" data-index={index}>
          <div class="h-full text-center">
            <div class="mb-4 text-4xl">
              {feature.icon === 'stars' && <span contenteditable="false">‚≠ê</span>}
              {feature.icon === 'lightbulb' && <span contenteditable="false">üí°</span>}
              {feature.icon === 'users' && <span contenteditable="false">üë•</span>}
            </div>
            <h3 class="text-xl font-medium mb-3" contenteditable="false" data-key={`features.${index}.title`}>{feature.title}</h3>
            <p class="text-gray-600 leading-relaxed" contenteditable="false" data-key={`features.${index}.description`}>{feature.description}</p>
            <button class="delete-feature-btn bg-red-500 text-white rounded px-2 py-1 mt-2 hidden" data-index={index} type="button">L√∂schen</button>
          </div>
        </div>
      ))}
    </div>
    <div class="text-center mt-6">
      <button id="add-feature-btn" class="bg-black text-white px-4 py-2 rounded hidden" type="button">Feature hinzuf√ºgen</button>
    </div>
  </div>
</section>

<section id="contact" class="py-20 bg-white border-t border-gray-200">
  <div class="container mx-auto px-6">
    <h2 class="text-3xl font-bold text-center mb-8 tracking-tight" contenteditable="false" data-key="contact.title">{data.contact.title}</h2>
    <p class="text-gray-700 text-center mb-10 max-w-xl mx-auto leading-relaxed" contenteditable="false" data-key="contact.description">{data.contact.description}</p>
    <div class="flex flex-col md:flex-row justify-center items-start md:space-x-8">
      <div class="w-full md:w-1/3 mb-8 md:mb-0">
        <div class="p-6 border border-gray-200 bg-white shadow-none">
          <h3 class="text-lg font-semibold mb-3 tracking-tight">Kontaktinformationen</h3>
          <div class="mb-2">
            <p class="text-gray-800 text-sm"><strong>Email:</strong> <span contenteditable="false" data-key="contact.email">{data.contact.email}</span></p>
          </div>
          <div class="mb-2">
            <p class="text-gray-800 text-sm"><strong>Telefon:</strong> <span contenteditable="false" data-key="contact.phone">{data.contact.phone}</span></p>
          </div>
          <div>
            <p class="text-gray-800 text-sm"><strong>Adresse:</strong> <span contenteditable="false" data-key="contact.address">{data.contact.address}</span></p>
          </div>
        </div>
      </div>
      <div class="w-full md:w-1/3">
        <form class="p-6 border border-gray-200 bg-white shadow-none space-y-4">
          <div>
            <label for="name" class="block text-gray-800 text-sm mb-1 font-medium">Name</label>
            <input type="text" id="name" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
          </div>
          <div>
            <label for="email" class="block text-gray-800 text-sm mb-1 font-medium">Email</label>
            <input type="email" id="email" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
          </div>
          <div>
            <label for="message" class="block text-gray-800 text-sm mb-1 font-medium">Nachricht</label>
            <textarea id="message" rows="4" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm"></textarea>
          </div>
          <button type="submit" class="w-full bg-black hover:bg-gray-900 text-white font-semibold py-2 px-4 transition">Senden</button>
        </form>
      </div>
    </div>
  </div>
</section>

<footer class="bg-gray-100 py-8">
  <div class="container mx-auto px-6">
    <div class="text-center text-gray-600">
      <p>¬© 2023 Alle Rechte vorbehalten.</p>
    </div>
  </div>
</footer>
</Layout>

<script type="module" define:vars={{ initialDataString, initialDataForClient, base, repo }}>
  // Initialer Zustand wird jetzt √ºber define:vars √ºbergeben und hier geparst
  const initialData = JSON.parse(initialDataString);
  let currentData = JSON.parse(initialDataString); // Aktueller Bearbeitungszustand
  let history = [JSON.parse(initialDataString)]; // Startzustand f√ºr History
  let historyIndex = 0;
  let pendingImageUploads = {}; // { repoPath: { file, dataKey, newUrl } }

  const pat = sessionStorage.getItem('github_pat');
  const toolbar = document.getElementById('toolbar');
  const statusDiv = document.getElementById('status');
  const publishButton = document.getElementById('publish');

  // --- Helper Functions ---
  function updateStatus(message, isError = false) {
    statusDiv.textContent = message;
    statusDiv.style.color = isError ? 'red' : 'white';
  }

  // Liest eine Datei als Base64
  function readFileAsBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = reader.result.split(',')[1];
        resolve(base64String);
      };
      reader.onerror = (error) => reject(error);
      reader.readAsDataURL(file);
    });
  }

  // Funktion zur sicheren Base64-Kodierung von UTF-8 Strings (f√ºr data.json)
  function utf8ToBase64(str) {
    try {
      return btoa(unescape(encodeURIComponent(str)));
    } catch (e) {
      console.error("Fehler beim Base64-Kodieren:", e);
      return btoa(str);
    }
  }

  // Hilfsfunktion: Setzt einen Wert in einem verschachtelten Objekt per Key-Pfad (z.B. hero.image)
  function setValueByKeyPath(obj, keyPath, value) {
    const keys = keyPath.split('.');
    let o = obj;
    for (let i = 0; i < keys.length - 1; i++) {
      if (!o[keys[i]]) o[keys[i]] = {};
      o = o[keys[i]];
    }
    o[keys[keys.length - 1]] = value;
  }

  // Hilfsfunktion: GitHub API Call
  async function githubApi(path, options = {}) {
    const url = `https://api.github.com/repos/${repo}/${path}`;
    const headers = {
      Authorization: `token ${pat}`,
      'Content-Type': 'application/json',
      ...options.headers,
    };
    const res = await fetch(url, { ...options, headers });
    if (!res.ok) throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);
    return res.json();
  }

  // --- Initialisierung & Event Listeners ---

  if (pat) {
    toolbar.classList.remove('hidden');
    document.querySelectorAll('[contenteditable="false"][data-key]').forEach(el => {
      el.setAttribute('contenteditable', 'true');
    });
  } else {
    toolbar.classList.add('hidden');
    document.querySelectorAll('[contenteditable="true"][data-key]').forEach(el => {
      el.setAttribute('contenteditable', 'false');
    });
  }

  // Speichern des Zustands (Text- und Bilddaten)
  function saveState() {
    const stateToSave = JSON.parse(JSON.stringify(currentData));
    if (historyIndex < history.length - 1) {
      history = history.slice(0, historyIndex + 1);
    }
    history.push(stateToSave);
    historyIndex++;
  }

  // Anwenden eines Zustands (nur Textdaten und Bild-URLs)
  function applyState(state) {
    currentData = JSON.parse(JSON.stringify(state));
    document.querySelectorAll('[data-key]').forEach(el => {
      const key = el.dataset.key;
      let value = key.split('.').reduce((obj, k) => obj && obj[k], currentData);
      if (el.tagName === 'IMG') {
        if (el.src !== location.origin + value) {
          el.src = value;
        }
      } else {
        if (el.textContent !== value) {
          el.textContent = value;
        }
      }
    });
    updateStatus('');
  }

  // Logout
  document.getElementById('logout').addEventListener('click', () => {
    sessionStorage.removeItem('github_pat');
    window.location.reload();
  });

  // Klick auf Bild -> Trigger Input
  document.querySelectorAll('img[data-key]').forEach(img => {
    img.addEventListener('click', () => {
      if (!pat) return;
      const dataKey = img.dataset.key;
      const inputId = `input-${dataKey.replace(/\./g, '-')}`;
      const input = document.getElementById(inputId);
      if (input) {
        input.click();
      } else {
        console.error(`Input-Feld mit ID ${inputId} nicht gefunden f√ºr Bild ${dataKey}`);
      }
    });
  });

  // Bild-Input √Ñnderung (immer neue Datei, URL sofort setzen)
  document.querySelectorAll('input[type="file"]').forEach(input => {
    input.addEventListener('change', (event) => {
      if (!pat) return;
      const file = event.target.files[0];
      if (file) {
        const dataKey = input.id.replace('input-', '').replace(/-/g, '.');
        const img = document.querySelector(`img[data-key="${dataKey}"]`);
        if (img) {
          // Eindeutigen Dateinamen erzeugen
          const ext = file.name.split('.').pop();
          const uniqueName = `${Date.now()}-${Math.random().toString(36).substr(2,6)}.${ext}`;
          const repoPath = `public/images/${uniqueName}`;
          const newUrl = `${base}/images/${uniqueName}`;
          // Lokale Vorschau aktualisieren
          const objectURL = URL.createObjectURL(file);
          img.src = objectURL;
          // currentData aktualisieren (URL setzen)
          setValueByKeyPath(currentData, dataKey, newUrl);
          // Upload vormerken
          pendingImageUploads[repoPath] = { file, dataKey, newUrl };
          updateStatus(`${file.name} zum Hochladen vorgemerkt.`);
          saveState();
        } else {
          console.error(`Bild-Element f√ºr Input ${input.id} (Key: ${dataKey}) nicht gefunden.`);
        }
      }
    });
  });

  // Bearbeitbare Texte
  document.querySelectorAll('[contenteditable][data-key]').forEach(el => {
    if (el.tagName !== 'IMG') {
      el.addEventListener('input', () => {
        if (!pat) return;
        const keyParts = el.dataset.key.split('.');
        let obj = currentData;
        try {
          for (let i = 0; i < keyParts.length - 1; i++) {
            obj = obj[keyParts[i]];
          }
          if (typeof obj === 'object' && obj !== null && keyParts[keyParts.length-1] in obj) {
            obj[keyParts[keyParts.length - 1]] = el.textContent;
            saveState();
          } else {
            console.warn(`Konnte Key ${el.dataset.key} in currentData nicht sicher setzen.`);
          }
        } catch(e) {
          console.error(`Fehler beim Aktualisieren von currentData f√ºr Key ${el.dataset.key}`, e);
        }
      });
    }
  });

  // Undo
  document.getElementById('undo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex > 0) {
      historyIndex--;
      applyState(history[historyIndex]);
    }
  });

  // Redo
  document.getElementById('redo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex < history.length - 1) {
      historyIndex++;
      applyState(history[historyIndex]);
    }
  });

  // Publish: Ein Commit f√ºr alle √Ñnderungen (Bilder + data.json)
  publishButton.addEventListener('click', async () => {
    if (!pat) return;
    publishButton.disabled = true;
    updateStatus('Starte Ver√∂ffentlichung...');
    try {
      // 1. Hole den aktuellen Commit & Tree von main
      const branch = await githubApi('git/refs/heads/main');
      const latestCommitSha = branch.object.sha;
      const latestCommit = await githubApi(`git/commits/${latestCommitSha}`);
      const baseTreeSha = latestCommit.tree.sha;

      // 2. Erstelle Blobs f√ºr alle neuen Bilder
      const imageEntries = Object.entries(pendingImageUploads);
      const blobs = [];
      for (const [repoPath, { file }] of imageEntries) {
        updateStatus(`Bereite Bild f√ºr Commit vor: ${repoPath}`);
        const content = await readFileAsBase64(file);
        const blob = await githubApi('git/blobs', {
          method: 'POST',
          body: JSON.stringify({ content, encoding: 'base64' })
        });
        blobs.push({ path: repoPath, mode: '100644', type: 'blob', sha: blob.sha });
      }

      // 3. Erstelle Blob f√ºr data.json
      updateStatus('Bereite data.json f√ºr Commit vor...');
      const dataContent = JSON.stringify(currentData, null, 2);
      const dataBlob = await githubApi('git/blobs', {
        method: 'POST',
        body: JSON.stringify({ content: dataContent, encoding: 'utf-8' })
      });
      blobs.push({ path: 'src/content/data.json', mode: '100644', type: 'blob', sha: dataBlob.sha });

      // 4. Erstelle neuen Tree
      updateStatus('Erstelle Tree f√ºr Commit...');
      const newTree = await githubApi('git/trees', {
        method: 'POST',
        body: JSON.stringify({
          base_tree: baseTreeSha,
          tree: blobs
        })
      });

      // 5. Erstelle neuen Commit
      updateStatus('Erstelle Commit...');
      const commit = await githubApi('git/commits', {
        method: 'POST',
        body: JSON.stringify({
          message: 'Update Bilder und data.json via Editor',
          tree: newTree.sha,
          parents: [latestCommitSha]
        })
      });

      // 6. Setze main auf neuen Commit
      updateStatus('Pushe Commit auf main...');
      await githubApi('git/refs/heads/main', {
        method: 'PATCH',
        body: JSON.stringify({ sha: commit.sha })
      });

      updateStatus('√Ñnderungen erfolgreich ver√∂ffentlicht!');
      pendingImageUploads = {};
      history = [JSON.parse(JSON.stringify(currentData))];
      historyIndex = 0;
    } catch (error) {
      console.error('Fehler beim Publish:', error);
      updateStatus(`Fehler beim Publish: ${error.message}`, true);
    }
    publishButton.disabled = false;
    setTimeout(() => updateStatus(''), 5000);
  });

  // --- Features: Add/Delete ---
  function renderFeatureButtons() {
    const isEdit = !!pat;
    document.querySelectorAll('.delete-feature-btn').forEach(btn => {
      btn.classList.toggle('hidden', !isEdit);
    });
    const addBtn = document.getElementById('add-feature-btn');
    if (addBtn) addBtn.classList.toggle('hidden', !isEdit);
  }

  // Funktion zum Erstellen eines einzelnen Feature-Elements (Helper)
  function createFeatureElement(feature, index) {
    const featureItem = document.createElement('div');
    featureItem.className = 'w-full md:w-1/3 p-6 feature-item';
    featureItem.dataset.index = index;
    featureItem.innerHTML = `
      <div class="h-full text-center">
        <div class="mb-4 text-4xl">
          ${feature.icon === 'stars' ? '<span contenteditable="false">‚≠ê</span>' : ''}
          ${feature.icon === 'lightbulb' ? '<span contenteditable="false">üí°</span>' : ''}
          ${feature.icon === 'users' ? '<span contenteditable="false">üë•</span>' : ''}
        </div>
        <h3 class="text-xl font-medium mb-3" contenteditable="false" data-key="features.${index}.title">${feature.title}</h3>
        <p class="text-gray-600 leading-relaxed" contenteditable="false" data-key="features.${index}.description">${feature.description}</p>
        <button class="delete-feature-btn bg-red-500 text-white rounded px-2 py-1 mt-2 ${pat ? '' : 'hidden'}" data-index="${index}" type="button">L√∂schen</button>
      </div>
    `;
    // Bearbeitbarkeit f√ºr neue Elemente setzen, falls im Edit-Modus
    if (pat) {
      featureItem.querySelectorAll('[contenteditable="false"][data-key]').forEach(el => {
        el.setAttribute('contenteditable', 'true');
        // Hier m√ºssten ggf. die 'input' Listener neu angeh√§ngt werden, wenn sie ben√∂tigt werden
        // F√ºr diese einfache Add/Delete-Aktion ist es vorerst nicht n√∂tig.
      });
    }
    return featureItem;
  }

  // Funktion zum Aktualisieren der Indizes nach dem L√∂schen
  function updateFeatureIndices() {
    const featureItems = document.querySelectorAll('#features-list .feature-item');
    featureItems.forEach((item, index) => {
      item.dataset.index = index;
      const titleEl = item.querySelector('[data-key^="features."][data-key$=".title"]');
      const descEl = item.querySelector('[data-key^="features."][data-key$=".description"]');
      const deleteBtn = item.querySelector('.delete-feature-btn');
      if (titleEl) titleEl.dataset.key = `features.${index}.title`;
      if (descEl) descEl.dataset.key = `features.${index}.description`;
      if (deleteBtn) deleteBtn.dataset.index = index;
    });
  }

  document.addEventListener('DOMContentLoaded', () => {
    renderFeatureButtons();
    const featuresList = document.getElementById('features-list');

    // Delete Feature
    featuresList?.addEventListener('click', (e) => {
      const btn = e.target.closest('.delete-feature-btn');
      if (!pat || !btn) return; // Nicht der Button oder nicht eingeloggt
      e.preventDefault(); // Standardverhalten verhindern
      const idx = parseInt(btn.dataset.index);
      if (!isNaN(idx) && currentData.features.length > 1) {
        currentData.features.splice(idx, 1); // Daten aktualisieren
        saveState();
        // Element aus DOM entfernen
        const itemToRemove = featuresList.querySelector(`.feature-item[data-index="${idx}"]`);
        if (itemToRemove) {
          itemToRemove.remove();
        }
        updateFeatureIndices(); // Indizes der verbleibenden Elemente anpassen
        renderFeatureButtons(); // Buttons neu rendern (falls n√∂tig)
      }
      return false; // Zus√§tzliche Ma√ünahme gegen Standardverhalten
    });

    // Add Feature
    document.getElementById('add-feature-btn')?.addEventListener('click', (e) => {
      if (!pat) return false; // Nicht eingeloggt
      e.preventDefault(); // Standardverhalten verhindern
      const newFeature = {
        title: 'Neues Feature',
        description: 'Beschreibung...',
        icon: 'stars'
      };
      currentData.features.push(newFeature); // Daten aktualisieren
      saveState();
      // Neues Element erstellen und hinzuf√ºgen
      const newIndex = currentData.features.length - 1;
      const newElement = createFeatureElement(newFeature, newIndex);
      if (featuresList) {
        featuresList.appendChild(newElement);
      }
      renderFeatureButtons(); // Buttons neu rendern (falls n√∂tig)
      return false; // Zus√§tzliche Ma√ünahme gegen Standardverhalten
    });
  });
</script>