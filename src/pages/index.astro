---
import globalData from "../content/global.json";

const initialData = JSON.stringify(globalData); // Daten im Frontmatter als JSON-String

---

<html lang="de">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Landing Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  </head>
  <body class="font-sans bg-white text-gray-900">
    <!-- Toolbar -->
	<div id="toolbar" class="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white p-2 flex justify-center space-x-4 rounded shadow-lg z-50 hidden">
      <div>
        <button id="undo" class="px-2 py-1 hover:bg-gray-600 rounded">R√ºckg√§ngig</button>
        <button id="redo" class="px-2 py-1 hover:bg-gray-600 rounded">Wiederholen</button>
      </div>
      <div>
        <button id="publish" class="px-2 py-1 hover:bg-gray-600 rounded">Ver√∂ffentlichen</button>
        <button id="logout" class="px-2 py-1 hover:bg-gray-600 rounded">Abmelden</button>
      </div>
    </div>

    <!-- Navigation -->
	<nav class="py-6 border-b border-gray-200 bg-white">
      <div class="container mx-auto px-6 flex items-center justify-between">
        <div class="text-xl font-bold tracking-tight" contenteditable="false">Logo</div>
        <div class="hidden md:flex space-x-8">
          <a href="#hero" class="hover:underline">Home</a>
          <a href="#about" class="hover:underline">√úber uns</a>
          <a href="#features" class="hover:underline">Features</a>
          <a href="#contact" class="hover:underline">Kontakt</a>
        </div>
      </div>
    </nav>

    <!-- Hero Section -->
    <section id="hero" class="py-20">
      <div class="container mx-auto px-6 flex flex-col md:flex-row items-center">
        <div class="flex flex-col w-full md:w-2/5 justify-center items-start text-center md:text-left">
          <h1 class="text-4xl font-bold leading-tight mt-4" contenteditable="true" data-key="hero.title">{globalData.hero.title}</h1>
          <p class="leading-relaxed my-6 text-gray-600" contenteditable="true" data-key="hero.subtitle">{globalData.hero.subtitle}</p>
          <button class="bg-black text-white hover:bg-gray-900 py-2 px-6 transition-colors duration-300 border border-black shadow-none" contenteditable="true" data-key="hero.cta">{globalData.hero.cta}</button>
        </div>
        <div class="w-full md:w-3/5 py-6 text-center">
          <img class="w-full md:w-4/5 mx-auto border border-gray-200 cursor-pointer" src={globalData.hero.image} alt="Hero Image" data-key="hero.image" />
          <input type="file" id="hero-image-upload" class="hidden" accept="image/*" />
        </div>
      </div>
    </section>

    <!-- About Section -->
    <section id="about" class="py-20 bg-gray-50">
      <div class="container mx-auto px-6 flex flex-col md:flex-row items-center md:items-start">
        <div class="w-full md:w-1/3 flex justify-center md:justify-start mb-8 md:mb-0">
          <img src={globalData.about.image} alt="About Us" class="w-40 h-40 object-cover rounded-full cursor-pointer" data-key="about.image" />
          <input type="file" id="about-image-upload" class="hidden" accept="image/*" />
        </div>
        <div class="w-full md:w-2/3 md:pl-12 flex flex-col justify-center">
          <h2 class="text-2xl font-bold mb-4 text-left text-gray-900 tracking-tight uppercase" contenteditable="true" data-key="about.title">{globalData.about.title}</h2>
          <p class="text-gray-700 mb-2 text-left leading-relaxed max-w-2xl" contenteditable="true" data-key="about.content">{globalData.about.content}</p>
        </div>
      </div>
    </section>

    <!-- Features Section -->
    <section id="features" class="py-16">
      <div class="container mx-auto px-6">
        <h2 class="text-3xl font-bold text-center mb-12" contenteditable="true" data-key="features.title">Unsere Features</h2>
        <div class="flex flex-wrap -mx-6">
          {globalData.features.map((feature, index) => (
            <div class="w-full md:w-1/3 p-6">
              <div class="h-full text-center">
                <div class="mb-4 text-4xl">
                  {feature.icon === 'stars' && <span contenteditable="false">‚≠ê</span>}
                  {feature.icon === 'lightbulb' && <span contenteditable="false">üí°</span>}
                  {feature.icon === 'users' && <span contenteditable="false">üë•</span>}
                </div>
                <h3 class="text-xl font-medium mb-3" contenteditable="true" data-key={`features.${index}.title`}>{feature.title}</h3>
                <p class="text-gray-600 leading-relaxed" contenteditable="true" data-key={`features.${index}.description`}>{feature.description}</p>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Contact Section -->
    <section id="contact" class="py-20 bg-white border-t border-gray-200">
      <div class="container mx-auto px-6">
        <h2 class="text-3xl font-bold text-center mb-8 tracking-tight" contenteditable="true" data-key="contact.title">{globalData.contact.title}</h2>
        <p class="text-gray-700 text-center mb-10 max-w-xl mx-auto leading-relaxed" contenteditable="true" data-key="contact.description">{globalData.contact.description}</p>
        <div class="flex flex-col md:flex-row justify-center items-start md:space-x-8">
          <div class="w-full md:w-1/3 mb-8 md:mb-0">
            <div class="p-6 border border-gray-200 bg-white shadow-none">
              <h3 class="text-lg font-semibold mb-3 tracking-tight">Kontaktinformationen</h3>
              <div class="mb-2">
                <p class="text-gray-800 text-sm"><strong>Email:</strong> <span contenteditable="true" data-key="contact.email">{globalData.contact.email}</span></p>
              </div>
              <div class="mb-2">
                <p class="text-gray-800 text-sm"><strong>Telefon:</strong> <span contenteditable="true" data-key="contact.phone">{globalData.contact.phone}</span></p>
              </div>
              <div>
                <p class="text-gray-800 text-sm"><strong>Adresse:</strong> <span contenteditable="true" data-key="contact.address">{globalData.contact.address}</span></p>
              </div>
            </div>
          </div>
          <div class="w-full md:w-1/3">
            <form class="p-6 border border-gray-200 bg-white shadow-none space-y-4">
              <div>
                <label for="name" class="block text-gray-800 text-sm mb-1 font-medium">Name</label>
                <input type="text" id="name" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
              </div>
              <div>
                <label for="email" class="block text-gray-800 text-sm mb-1 font-medium">Email</label>
                <input type="email" id="email" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
              </div>
              <div>
                <label for="message" class="block text-gray-800 text-sm mb-1 font-medium">Nachricht</label>
                <textarea id="message" rows="4" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm"></textarea>
              </div>
              <button type="submit" class="w-full bg-black hover:bg-gray-900 text-white font-semibold py-2 px-4 transition">Senden</button>
            </form>
          </div>
        </div>
      </div>
    </section>

    <!-- Footer -->
    <footer class="bg-gray-100 py-8">
      <div class="container mx-auto px-6">
        <div class="text-center text-gray-600">
          <p>¬© 2023 Alle Rechte vorbehalten.</p>
        </div>
      </div>
    </footer>

    <script type="module" define:vars={{ initialData }}>
	// Initialer Zustand wird jetzt √ºber define:vars √ºbergeben und hier geparst
	let currentData = JSON.parse(initialData);
	let history = [JSON.parse(initialData)]; // Startzustand f√ºr History
	let historyIndex = 0;

      // √úberpr√ºfen, ob der Benutzer eingeloggt ist
      const pat = sessionStorage.getItem('github_pat');
      if (pat) {
        document.getElementById('toolbar').classList.remove('hidden'); // Use hidden class now
        document.querySelectorAll('[contenteditable]').forEach(el => {
          el.setAttribute('contenteditable', 'true');
        });
      } else {
		document.getElementById('toolbar').classList.add('hidden'); // Ensure it's hidden if not logged in
	  }

      // Funktion zum Speichern des aktuellen Zustands
      function saveState() {
        if (historyIndex < history.length - 1) {
          history = history.slice(0, historyIndex + 1);
        }
        history.push(JSON.parse(JSON.stringify(currentData)));
        historyIndex++;
      }

      // Funktion zum Anwenden eines Zustands
      function applyState(state) {
        currentData = JSON.parse(JSON.stringify(state));
        document.querySelectorAll('[data-key]').forEach(el => {
          const key = el.dataset.key;
          let value = key.split('.').reduce((obj, k) => obj && obj[k], currentData);
          if (el.tagName === 'IMG') {
            el.src = value;
          } else {
            el.textContent = value;
          }
        });
      }

      // Event-Listener f√ºr Abmelden
      document.getElementById('logout').addEventListener('click', () => {
        sessionStorage.removeItem('github_pat');
        window.location.reload();
      });

      // Event-Listener f√ºr Bilder
      document.querySelectorAll('img[data-key]').forEach(img => {
        img.addEventListener('click', () => {
          if (!pat) return;
          const input = document.getElementById(`${img.dataset.key}-upload`);
          input.click();
        });
      });

      document.querySelectorAll('input[type="file"]').forEach(input => {
        input.addEventListener('change', (event) => {
          const file = event.target.files[0];
          if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
              const img = document.querySelector(`img[data-key="${input.id.replace('-upload', '')}"]`);
              img.src = e.target.result;
              const keyParts = input.id.replace('-upload', '').split('.');
              let obj = currentData;
              for (let i = 0; i < keyParts.length - 1; i++) {
                obj = obj[keyParts[i]];
              }
              obj[keyParts[keyParts.length - 1]] = e.target.result;
              saveState();
            };
            reader.readAsDataURL(file);
          }
        });
      });

      // Event-Listener f√ºr bearbeitbare Texte
      document.querySelectorAll('[contenteditable][data-key]').forEach(el => {
        el.addEventListener('input', () => {
          const keyParts = el.dataset.key.split('.');
          let obj = currentData;
          for (let i = 0; i < keyParts.length - 1; i++) {
            obj = obj[keyParts[i]];
          }
          obj[keyParts[keyParts.length - 1]] = el.textContent;
          saveState();
        });
      });

      // R√ºckg√§ngig
      document.getElementById('undo').addEventListener('click', () => {
        if (historyIndex > 0) {
          historyIndex--;
          applyState(history[historyIndex]);
        }
      });

      // Wiederholen
      document.getElementById('redo').addEventListener('click', () => {
        if (historyIndex < history.length - 1) {
          historyIndex++;
          applyState(history[historyIndex]);
        }
      });

      // Ver√∂ffentlichen
      document.getElementById('publish').addEventListener('click', async () => {
        const pat = sessionStorage.getItem('github_pat');
        if (!pat) return;

        // Hier m√ºssen wir die Bilder auf GitHub hochladen und die Pfade aktualisieren
        // F√ºr diese einfache Implementierung speichern wir nur die Text√§nderungen
        // Bild-Uploads erfordern zus√§tzliche API-Aufrufe und Pfadanpassungen
        const repo = 'knuspermixx/astro-edit-starter';
        const path = 'src/content/global.json';
        const url = `https://api.github.com/repos/${repo}/contents/${path}`;

        // Aktuellen Inhalt abrufen, um SHA zu bekommen
        const getResponse = await fetch(url, {
          headers: { Authorization: `token ${pat}` },
        });
        const { sha } = await getResponse.json();

        // Neue Dateiinhalte
        const content = btoa(JSON.stringify(currentData, null, 2));
        const body = {
          message: 'Update global.json from live editor',
          content,
          sha,
          branch: 'main',
        };

        const response = await fetch(url, {
          method: 'PUT',
          headers: {
            Authorization: `token ${pat}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(body),
        });

        if (response.ok) {
          alert('√Ñnderungen erfolgreich ver√∂ffentlicht!');
          // Optional: Seite neu laden oder Build ausl√∂sen
        } else {
          alert('Fehler beim Ver√∂ffentlichen. √úberpr√ºfe deinen PAT und die Berechtigungen.');
        }
      });
    </script>
  </body>
</html>