---
import { base } from "astro:config/client";
import data from "../content/data.json";
import Layout from "../layouts/Layout.astro";

// Basis-URL aus astro.config.mjs holen (wichtig f√ºr Pfadberechnungen)
const repo = 'knuspermixx/astro-edit-starter'; // Repository Name f√ºr API Calls

// Daten f√ºr den Client vorbereiten
const initialDataString = JSON.stringify(data); // Als String √ºbergeben
// const initialDataForClient = data; // Nicht mehr ben√∂tigt f√ºr Pfad-Lookup hier
---

<Layout>
<div id="toolbar" class="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white p-2 flex justify-center space-x-4 rounded shadow-lg z-50 hidden">
  <div>
    <button id="undo" class="px-2 py-1 hover:bg-gray-600 rounded">R√ºckg√§ngig</button>
    <button id="redo" class="px-2 py-1 hover:bg-gray-600 rounded">Wiederholen</button>
  </div>
  <div>
    <button id="publish" class="px-2 py-1 hover:bg-gray-600 rounded">Ver√∂ffentlichen</button>
    <button id="logout" class="px-2 py-1 hover:bg-gray-600 rounded">Abmelden</button>
  </div>
   <div id="status" class="text-sm ml-4 self-center"></div>
</div>

<nav class="py-6 border-b border-gray-200 bg-white">
  <div class="container mx-auto px-6 flex items-center justify-between">
    <div class="text-xl font-bold tracking-tight" contenteditable="false">Logo</div>
    <div class="hidden md:flex space-x-8">
      <a href="#hero" class="hover:underline">Home</a>
      <a href="#about" class="hover:underline">√úber uns</a>
      <a href="#features" class="hover:underline">Features</a>
      <a href="#contact" class="hover:underline">Kontakt</a>
    </div>
  </div>
</nav>

<section id="hero" class="py-20">
  <div class="container mx-auto px-6 flex flex-col md:flex-row items-center">
    <div class="flex flex-col w-full md:w-2/5 justify-center items-start text-center md:text-left">
      <h1 class="text-4xl font-bold leading-tight mt-4" contenteditable="false" data-key="hero.title">{data.hero.title}</h1>
      <p class="leading-relaxed my-6 text-gray-600" contenteditable="false" data-key="hero.subtitle">{data.hero.subtitle}</p>
      <button class="bg-black text-white hover:bg-gray-900 py-2 px-6 transition-colors duration-300 border border-black shadow-none" contenteditable="false" data-key="hero.cta">{data.hero.cta}</button>
    </div>
    <div class="w-full md:w-3/5 py-6 text-center">
      <img class="w-full md:w-4/5 mx-auto border border-gray-200 cursor-pointer" src={data.hero.image} alt="Hero Image" data-key="hero.image" id="img-hero-image" />
      <input type="file" id="input-hero-image" class="hidden" accept="image/*" />
    </div>
  </div>
</section>

<section id="about" class="py-20 bg-gray-50">
  <div class="container mx-auto px-6 flex flex-col md:flex-row items-center md:items-start">
    <div class="w-full md:w-1/3 flex justify-center md:justify-start mb-8 md:mb-0">
      <img src={data.about.image} alt="About Us" class="w-40 h-40 object-cover rounded-full cursor-pointer" data-key="about.image" id="img-about-image"/>
      <input type="file" id="input-about-image" class="hidden" accept="image/*" />
    </div>
    <div class="w-full md:w-2/3 md:pl-12 flex flex-col justify-center">
      <h2 class="text-2xl font-bold mb-4 text-left text-gray-900 tracking-tight uppercase" contenteditable="false" data-key="about.title">{data.about.title}</h2>
      <p class="text-gray-700 mb-2 text-left leading-relaxed max-w-2xl" contenteditable="false" data-key="about.content">{data.about.content}</p>
    </div>
  </div>
</section>

<section id="features" class="py-16">
  <div class="container mx-auto px-6">
    <h2 class="text-3xl font-bold text-center mb-12" contenteditable="false" data-key="features.0.title">Unsere Features</h2> {/* Beachte: Dieser Key ist jetzt statisch, da Features nicht mehr hinzugef√ºgt/gel√∂scht werden */}
    <div id="features-list" class="flex flex-wrap -mx-6">
      {data.features.map((feature, index) => (
        <div class="w-full md:w-1/3 p-6"> {/* Removed feature-item class and data-index */}
          {/* Wrap the content in an anchor tag */}
          <a href={`${base}/feature/${feature.id}`} class="block h-full text-center hover:shadow-lg transition-shadow duration-300 p-6 border border-gray-200 rounded">
            <div class="mb-4 text-4xl">
              {/* Icons remain, but not editable here */}
              {feature.icon === 'stars' && <span>‚≠ê</span>}
              {feature.icon === 'lightbulb' && <span>üí°</span>}
              {feature.icon === 'users' && <span>üë•</span>}
            </div>
            {/* Removed contenteditable and data-key from h3 and p */}
            <h3 class="text-xl font-medium mb-3">{feature.title}</h3>
            <p class="text-gray-600 leading-relaxed">{feature.description}</p>
            {/* Removed delete button */}
          </a>
        </div>
      ))}
    </div>
    {/* Removed Add Feature button */}
  </div>
</section>

<section id="contact" class="py-20 bg-white border-t border-gray-200">
  <div class="container mx-auto px-6">
    <h2 class="text-3xl font-bold text-center mb-8 tracking-tight" contenteditable="false" data-key="contact.title">{data.contact.title}</h2>
    <p class="text-gray-700 text-center mb-10 max-w-xl mx-auto leading-relaxed" contenteditable="false" data-key="contact.description">{data.contact.description}</p>
    <div class="flex flex-col md:flex-row justify-center items-start md:space-x-8">
      <div class="w-full md:w-1/3 mb-8 md:mb-0">
        <div class="p-6 border border-gray-200 bg-white shadow-none">
          <h3 class="text-lg font-semibold mb-3 tracking-tight">Kontaktinformationen</h3>
          <div class="mb-2">
            <p class="text-gray-800 text-sm"><strong>Email:</strong> <span contenteditable="false" data-key="contact.email">{data.contact.email}</span></p>
          </div>
          <div class="mb-2">
            <p class="text-gray-800 text-sm"><strong>Telefon:</strong> <span contenteditable="false" data-key="contact.phone">{data.contact.phone}</span></p>
          </div>
          <div>
            <p class="text-gray-800 text-sm"><strong>Adresse:</strong> <span contenteditable="false" data-key="contact.address">{data.contact.address}</span></p>
          </div>
        </div>
      </div>
      <div class="w-full md:w-1/3">
        <form class="p-6 border border-gray-200 bg-white shadow-none space-y-4">
          <div>
            <label for="name" class="block text-gray-800 text-sm mb-1 font-medium">Name</label>
            <input type="text" id="name" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
          </div>
          <div>
            <label for="email" class="block text-gray-800 text-sm mb-1 font-medium">Email</label>
            <input type="email" id="email" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm">
          </div>
          <div>
            <label for="message" class="block text-gray-800 text-sm mb-1 font-medium">Nachricht</label>
            <textarea id="message" rows="4" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:border-black bg-white text-gray-900 text-sm"></textarea>
          </div>
          <button type="submit" class="w-full bg-black hover:bg-gray-900 text-white font-semibold py-2 px-4 transition">Senden</button>
        </form>
      </div>
    </div>
  </div>
</section>

<footer class="bg-gray-100 py-8">
  <div class="container mx-auto px-6">
    <div class="text-center text-gray-600">
      <p>¬© 2023 Alle Rechte vorbehalten.</p>
    </div>
  </div>
</footer>
</Layout>

<script type="module" define:vars={{ initialDataString, base, repo }}> // Removed initialDataForClient
  // Initialer Zustand wird jetzt √ºber define:vars √ºbergeben und hier geparst
  const initialData = JSON.parse(initialDataString);
  let currentData = JSON.parse(initialDataString); // Aktueller Bearbeitungszustand
  let history = [JSON.parse(initialDataString)]; // Startzustand f√ºr History
  let historyIndex = 0;
  let pendingImageUploads = {}; // { repoPath: { file, dataKey, newUrl } }

  const pat = sessionStorage.getItem('github_pat');
  const toolbar = document.getElementById('toolbar');
  const statusDiv = document.getElementById('status');
  const publishButton = document.getElementById('publish');

  // --- Helper Functions ---
  function updateStatus(message, isError = false) {
    statusDiv.textContent = message;
    statusDiv.style.color = isError ? 'red' : 'white';
  }

  // Liest eine Datei als Base64
  function readFileAsBase64(file) {
    return new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.onload = () => {
        const base64String = reader.result.split(',')[1];
        resolve(base64String);
      };
      reader.onerror = (error) => reject(error);
      reader.readAsDataURL(file);
    });
  }

  // Funktion zur sicheren Base64-Kodierung von UTF-8 Strings (f√ºr data.json)
  function utf8ToBase64(str) {
    try {
      return btoa(unescape(encodeURIComponent(str)));
    } catch (e) {
      console.error("Fehler beim Base64-Kodieren:", e);
      return btoa(str);
    }
  }

  // Hilfsfunktion: Setzt einen Wert in einem verschachtelten Objekt per Key-Pfad (z.B. hero.image)
  function setValueByKeyPath(obj, keyPath, value) {
    const keys = keyPath.split('.');
    let o = obj;
    for (let i = 0; i < keys.length - 1; i++) {
       if (keys[i] === '__proto__' || keys[i] === 'constructor' || keys[i] === 'prototype') {
         console.error("Attempted prototype pollution:", keyPath);
         return; // Verhindere Prototype Pollution
       }
      if (!o[keys[i]]) o[keys[i]] = {};
      o = o[keys[i]];
    }
     if (keys[keys.length - 1] === '__proto__' || keys[keys.length - 1] === 'constructor' || keys[keys.length - 1] === 'prototype') {
        console.error("Attempted prototype pollution:", keyPath);
        return; // Verhindere Prototype Pollution
     }
    o[keys[keys.length - 1]] = value;
  }

  // Hilfsfunktion: GitHub API Call
  async function githubApi(path, options = {}) {
    const url = `https://api.github.com/repos/${repo}/${path}`;
    const headers = {
      Authorization: `token ${pat}`,
      'Content-Type': 'application/json',
      ...options.headers,
    };
    const res = await fetch(url, { ...options, headers });
    if (!res.ok) throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);
     // Nur bei GET oder wenn explizit JSON erwartet wird, parsen
     if (options.method === 'GET' || !options.method || res.headers.get('Content-Type')?.includes('application/json')) {
        try {
            return await res.json();
        } catch (e) {
            // Wenn kein JSON zur√ºckkommt (z.B. bei PATCH auf refs), leeres Objekt zur√ºckgeben
            if (res.status === 200 || res.status === 201 || res.status === 204) {
                return {};
            }
            throw e; // Anderen Fehler weiterwerfen
        }
    }
    return {}; // Kein JSON erwartet oder vorhanden
  }

  // --- Initialisierung & Event Listeners ---

  // Funktion zum Anh√§ngen des Input-Listeners an ein Element
  function attachInputListener(el) {
    // Nur an Elemente anh√§ngen, die *nicht* Teil der Feature-Liste sind
    if (!el || el.tagName === 'IMG' || !el.hasAttribute('data-key') || el.closest('#features-list')) return;

    el.addEventListener('input', () => {
      if (!pat) return;
      const key = el.dataset.key;
      try {
        // Verwende die Hilfsfunktion, um den Wert sicher zu setzen
        setValueByKeyPath(currentData, key, el.textContent);
        saveState();
      } catch(e) {
        console.error(`Fehler beim Aktualisieren von currentData f√ºr Key ${key}`, e);
      }
    });
  }

  if (pat) {
    toolbar.classList.remove('hidden');
    // Mache nur Elemente *au√üerhalb* der Feature-Liste bearbeitbar
    document.querySelectorAll('[contenteditable="false"][data-key]').forEach(el => {
       if (!el.closest('#features-list')) {
         el.setAttribute('contenteditable', 'true');
         attachInputListener(el); // Listener f√ºr initial bearbeitbare Elemente anh√§ngen
       }
    });
  } else {
    toolbar.classList.add('hidden');
    // Kein contenteditable="true" setzen, wenn nicht eingeloggt
  }

  // Speichern des Zustands (Text- und Bilddaten)
  function saveState() {
    const stateToSave = JSON.parse(JSON.stringify(currentData));
    if (historyIndex < history.length - 1) {
      history = history.slice(0, historyIndex + 1);
    }
    history.push(stateToSave);
    historyIndex++;
  }

  // Anwenden eines Zustands (nur Textdaten und Bild-URLs)
  function applyState(state) {
    currentData = JSON.parse(JSON.stringify(state));
    // Aktualisiere nur Elemente *au√üerhalb* der Feature-Liste
    document.querySelectorAll('[data-key]').forEach(el => {
       if (el.closest('#features-list')) return; // √úberspringe Feature-Liste

      const key = el.dataset.key;
      let value = key.split('.').reduce((obj, k) => obj && obj[k], currentData);
      if (el.tagName === 'IMG') {
        // Nur aktualisieren, wenn sich die URL tats√§chlich ge√§ndert hat
        const newSrc = value.startsWith('/') ? location.origin + value : value;
        if (el.src !== newSrc) {
          el.src = value; // Setze die URL aus den Daten
        }
      } else {
        if (el.textContent !== value) {
          el.textContent = value;
        }
      }
    });
    updateStatus('');
  }

  // Logout
  document.getElementById('logout').addEventListener('click', () => {
    sessionStorage.removeItem('github_pat');
    window.location.reload();
  });

  // Klick auf Bild -> Trigger Input (nur f√ºr Bilder au√üerhalb der Feature-Liste)
  document.querySelectorAll('img[data-key]').forEach(img => {
     if (img.closest('#features-list')) return; // √úberspringe Feature-Liste
    img.addEventListener('click', () => {
      if (!pat) return;
      const dataKey = img.dataset.key;
      const inputId = `input-${dataKey.replace(/\./g, '-')}`;
      const input = document.getElementById(inputId);
      if (input) {
        input.click();
      } else {
        console.error(`Input-Feld mit ID ${inputId} nicht gefunden f√ºr Bild ${dataKey}`);
      }
    });
  });

  // Bild-Input √Ñnderung (immer neue Datei, URL sofort setzen)
  document.querySelectorAll('input[type="file"]').forEach(input => {
    input.addEventListener('change', (event) => {
      if (!pat) return;
      const file = event.target.files[0];
      if (file) {
        const dataKey = input.id.replace('input-', '').replace(/-/g, '.');
        const img = document.querySelector(`img[data-key="${dataKey}"]`);
        if (img && !img.closest('#features-list')) { // Stelle sicher, dass es nicht in der Feature-Liste ist
          // Eindeutigen Dateinamen erzeugen
          const ext = file.name.split('.').pop();
          const uniqueName = `${Date.now()}-${Math.random().toString(36).substr(2,6)}.${ext}`;
          // Korrekter Pfad im Repo (relativ zum public Ordner)
          const repoPath = `public/images/${uniqueName}`;
          // Korrekte URL f√ºr das src Attribut (relativ zur Basis-URL der Seite)
          const newUrl = `${base}/images/${uniqueName}`; // Verwende base
          // Lokale Vorschau aktualisieren
          const objectURL = URL.createObjectURL(file);
          img.src = objectURL; // Vorschau mit lokaler URL
          // currentData aktualisieren (URL setzen, die im Repo gespeichert wird)
          setValueByKeyPath(currentData, dataKey, newUrl); // Speichere die relative URL
          // Upload vormerken
          pendingImageUploads[repoPath] = { file, dataKey, newUrl };
          updateStatus(`${file.name} zum Hochladen vorgemerkt.`);
          saveState();
        } else if (!img) {
          console.error(`Bild-Element f√ºr Input ${input.id} (Key: ${dataKey}) nicht gefunden.`);
        }
      }
    });
  });

  // Bearbeitbare Texte (Initialisierung f√ºr bereits vorhandene Elemente)
  // Die Listener werden jetzt im `if (pat)` Block oben angeh√§ngt.

  // Undo
  document.getElementById('undo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex > 0) {
      historyIndex--;
      applyState(history[historyIndex]);
    }
  });

  // Redo
  document.getElementById('redo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex < history.length - 1) {
      historyIndex++;
      applyState(history[historyIndex]);
    }
  });

  // Publish: Ein Commit f√ºr alle √Ñnderungen (Bilder + data.json)
  publishButton.addEventListener('click', async () => {
    if (!pat) return;
    publishButton.disabled = true;
    updateStatus('Starte Ver√∂ffentlichung...');
    try {
      // 1. Hole den aktuellen Commit & Tree von main
      const branch = await githubApi('git/refs/heads/main');
      const latestCommitSha = branch.object.sha;
      const latestCommit = await githubApi(`git/commits/${latestCommitSha}`);
      const baseTreeSha = latestCommit.tree.sha;

      // 2. Erstelle Blobs f√ºr alle neuen Bilder
      const imageEntries = Object.entries(pendingImageUploads);
      const blobs = [];
      for (const [repoPath, { file }] of imageEntries) {
        updateStatus(`Bereite Bild f√ºr Commit vor: ${repoPath}`);
        const content = await readFileAsBase64(file);
        const blob = await githubApi('git/blobs', {
          method: 'POST',
          body: JSON.stringify({ content, encoding: 'base64' })
        });
        // Verwende den korrekten repoPath (relativ zum Repo-Root)
        blobs.push({ path: repoPath, mode: '100644', type: 'blob', sha: blob.sha });
      }

      // 3. Erstelle Blob f√ºr data.json
      updateStatus('Bereite data.json f√ºr Commit vor...');
      const dataContent = JSON.stringify(currentData, null, 2);
      // const encodedDataContent = utf8ToBase64(dataContent); // Base64 f√ºr GitHub API
      const dataBlob = await githubApi('git/blobs', {
        method: 'POST',
        body: JSON.stringify({ content: dataContent, encoding: 'utf-8' }) // utf-8 verwenden
      });
      blobs.push({ path: 'src/content/data.json', mode: '100644', type: 'blob', sha: dataBlob.sha });

      // 4. Erstelle neuen Tree
      updateStatus('Erstelle Tree f√ºr Commit...');
      const newTree = await githubApi('git/trees', {
        method: 'POST',
        body: JSON.stringify({
          base_tree: baseTreeSha,
          tree: blobs
        })
      });

      // 5. Erstelle neuen Commit
      updateStatus('Erstelle Commit...');
      const commit = await githubApi('git/commits', {
        method: 'POST',
        body: JSON.stringify({
          message: 'Update content and images via Editor', // Allgemeinere Nachricht
          tree: newTree.sha,
          parents: [latestCommitSha]
        })
      });

      // 6. Setze main auf neuen Commit
      updateStatus('Pushe Commit auf main...');
      await githubApi('git/refs/heads/main', {
        method: 'PATCH',
        body: JSON.stringify({ sha: commit.sha })
      });

      updateStatus('√Ñnderungen erfolgreich ver√∂ffentlicht!');
      pendingImageUploads = {}; // Leere vorgemerkte Uploads
      // Setze den aktuellen Zustand als neuen Startpunkt f√ºr die History
      history = [JSON.parse(JSON.stringify(currentData))];
      historyIndex = 0;
    } catch (error) {
      console.error('Fehler beim Publish:', error);
      updateStatus(`Fehler beim Publish: ${error.message}`, true);
    }
    publishButton.disabled = false;
    setTimeout(() => updateStatus(''), 5000);
  });

</script>