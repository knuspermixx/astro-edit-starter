\
---
// filepath: /Users/timo/Development/astro/astro-edit-starter/src/pages/feature/[id].astro
import { base } from "astro:config/client";
import data from "../../content/data.json";
import Layout from "../../layouts/Layout.astro";

export function getStaticPaths() {
  return data.features.map(feature => ({
    params: { id: feature.id },
    props: { feature },
  }));
}

const { id } = Astro.params;
const { feature } = Astro.props;

if (!feature) {
  return new Response(null, {
    status: 404,
    statusText: 'Not Found'
  });
}

// Daten für den Client vorbereiten
const initialDataString = JSON.stringify(data); // Gesamte Daten für Updates
const featureIndex = data.features.findIndex(f => f.id === id);
const repo = 'knuspermixx/astro-edit-starter'; // Repository Name für API Calls
---

<Layout>
  <div id="toolbar" class="fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white p-2 flex justify-center space-x-4 rounded shadow-lg z-50 hidden">
    <div>
      <button id="undo" class="px-2 py-1 hover:bg-gray-600 rounded">Rückgängig</button>
      <button id="redo" class="px-2 py-1 hover:bg-gray-600 rounded">Wiederholen</button>
    </div>
    <div>
      <button id="publish" class="px-2 py-1 hover:bg-gray-600 rounded">Veröffentlichen</button>
      <button id="logout" class="px-2 py-1 hover:bg-gray-600 rounded">Abmelden</button>
    </div>
     <div id="status" class="text-sm ml-4 self-center"></div>
  </div>

  <nav class="py-6 border-b border-gray-200 bg-white">
    <div class="container mx-auto px-6 flex items-center justify-between">
      <a href={base + "/"} class="text-xl font-bold tracking-tight">Zurück zur Übersicht</a>
    </div>
  </nav>

  <section class="py-20">
    <div class="container mx-auto px-6">
      <h1 class="text-4xl font-bold mb-4" contenteditable="false" data-key={`features.${featureIndex}.title`}>{feature.title}</h1>
      <p class="text-lg text-gray-700 mb-8" contenteditable="false" data-key={`features.${featureIndex}.description`}>{feature.description}</p>
      <div class="prose max-w-none" contenteditable="false" data-key={`features.${featureIndex}.details`}>
        {/* Hier könnten Markdown-Inhalte gerendert werden, wenn `details` Markdown wäre.
            Für einfachen Text reicht ein div oder p. */}
        <p>{feature.details}</p>
      </div>
    </div>
  </section>

  <footer class="bg-gray-100 py-8 mt-20">
    <div class="container mx-auto px-6">
      <div class="text-center text-gray-600">
        <p>© 2023 Alle Rechte vorbehalten.</p>
      </div>
    </div>
  </footer>
</Layout>

<script type="module" define:vars={{ initialDataString, featureIndex, base, repo }}>
  // Initialer Zustand wird jetzt über define:vars übergeben und hier geparst
  const initialData = JSON.parse(initialDataString);
  let currentData = JSON.parse(initialDataString); // Aktueller Bearbeitungszustand (gesamte Daten)
  let history = [JSON.parse(initialDataString)]; // Startzustand für History
  let historyIndex = 0;

  const pat = sessionStorage.getItem('github_pat');
  const toolbar = document.getElementById('toolbar');
  const statusDiv = document.getElementById('status');
  const publishButton = document.getElementById('publish');

  // --- Helper Functions ---
  function updateStatus(message, isError = false) {
    statusDiv.textContent = message;
    statusDiv.style.color = isError ? 'red' : 'white';
  }

  // Funktion zur sicheren Base64-Kodierung von UTF-8 Strings (für data.json)
  function utf8ToBase64(str) {
    try {
      return btoa(unescape(encodeURIComponent(str)));
    } catch (e) {
      console.error("Fehler beim Base64-Kodieren:", e);
      return btoa(str);
    }
  }

  // Hilfsfunktion: Setzt einen Wert in einem verschachtelten Objekt per Key-Pfad
  function setValueByKeyPath(obj, keyPath, value) {
    const keys = keyPath.split('.');
    let o = obj;
    for (let i = 0; i < keys.length - 1; i++) {
      if (keys[i] === '__proto__' || keys[i] === 'constructor' || keys[i] === 'prototype') {
         console.error("Attempted prototype pollution:", keyPath);
         return; // Verhindere Prototype Pollution
      }
      // Wenn der Key ein Index für ein Array ist
      if (Array.isArray(o) && !isNaN(parseInt(keys[i]))) {
        const index = parseInt(keys[i]);
        if (!o[index]) o[index] = {}; // Erstelle Objekt, wenn Index nicht existiert
        o = o[index];
      } else if (typeof o === 'object' && o !== null) {
         if (!o.hasOwnProperty(keys[i])) o[keys[i]] = {}; // Nur eigene Properties erstellen
         o = o[keys[i]];
      } else {
         console.error(`Invalid path segment ${keys[i]} in ${keyPath}`);
         return; // Pfad ist ungültig
      }
    }
     if (keys[keys.length - 1] === '__proto__' || keys[keys.length - 1] === 'constructor' || keys[keys.length - 1] === 'prototype') {
        console.error("Attempted prototype pollution:", keyPath);
        return; // Verhindere Prototype Pollution
     }
    o[keys[keys.length - 1]] = value;
  }


  // Hilfsfunktion: GitHub API Call
  async function githubApi(path, options = {}) {
    const url = `https://api.github.com/repos/${repo}/${path}`;
    const headers = {
      Authorization: `token ${pat}`,
      'Content-Type': 'application/json',
      ...options.headers,
    };
    const res = await fetch(url, { ...options, headers });
    if (!res.ok) throw new Error(`${res.status} ${res.statusText}: ${await res.text()}`);
    // Nur bei GET oder wenn explizit JSON erwartet wird, parsen
     if (options.method === 'GET' || !options.method || res.headers.get('Content-Type')?.includes('application/json')) {
        try {
            return await res.json();
        } catch (e) {
            // Wenn kein JSON zurückkommt (z.B. bei PATCH auf refs), leeres Objekt zurückgeben
            if (res.status === 200 || res.status === 201 || res.status === 204) {
                return {};
            }
            throw e; // Anderen Fehler weiterwerfen
        }
    }
    return {}; // Kein JSON erwartet oder vorhanden
  }

  // --- Initialisierung & Event Listeners ---

  // Funktion zum Anhängen des Input-Listeners an ein Element
  function attachInputListener(el) {
    if (!el || !el.hasAttribute('data-key')) return;

    el.addEventListener('input', () => {
      if (!pat) return;
      const key = el.dataset.key;
      try {
        // Verwende die Hilfsfunktion, um den Wert sicher zu setzen
        // Wir aktualisieren currentData, das die *gesamten* Daten enthält
        setValueByKeyPath(currentData, key, el.textContent);
        saveState();
      } catch(e) {
        console.error(`Fehler beim Aktualisieren von currentData für Key ${key}`, e);
      }
    });
  }

  if (pat) {
    toolbar.classList.remove('hidden');
    document.querySelectorAll('[contenteditable="false"][data-key]').forEach(el => {
      el.setAttribute('contenteditable', 'true');
      attachInputListener(el); // Listener für bearbeitbare Elemente anhängen
    });
  } else {
    toolbar.classList.add('hidden');
  }

  // Speichern des Zustands (nur Textdaten)
  function saveState() {
    const stateToSave = JSON.parse(JSON.stringify(currentData));
    if (historyIndex < history.length - 1) {
      history = history.slice(0, historyIndex + 1);
    }
    history.push(stateToSave);
    historyIndex++;
  }

  // Anwenden eines Zustands (nur Textdaten)
  function applyState(state) {
    currentData = JSON.parse(JSON.stringify(state));
    document.querySelectorAll('[data-key]').forEach(el => {
      const key = el.dataset.key;
      // Wert aus dem *gesamten* Datenobjekt holen
      let value = key.split('.').reduce((obj, k) => {
         if (obj && typeof obj === 'object') {
            // Umgang mit Array-Indizes im Key
            if (Array.isArray(obj) && !isNaN(parseInt(k))) {
               return obj[parseInt(k)];
            }
            return obj[k];
         }
         return undefined;
      }, currentData);

      if (value !== undefined && el.textContent !== value) {
        el.textContent = value;
      } else if (value === undefined) {
         console.warn(`Wert für Key ${key} nicht im State gefunden.`);
      }
    });
    updateStatus('');
  }


  // Logout
  document.getElementById('logout').addEventListener('click', () => {
    sessionStorage.removeItem('github_pat');
    window.location.reload();
  });

  // Undo
  document.getElementById('undo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex > 0) {
      historyIndex--;
      applyState(history[historyIndex]);
    }
  });

  // Redo
  document.getElementById('redo').addEventListener('click', () => {
    if (!pat) return;
    if (historyIndex < history.length - 1) {
      historyIndex++;
      applyState(history[historyIndex]);
    }
  });

  // Publish: Nur data.json aktualisieren
  publishButton.addEventListener('click', async () => {
    if (!pat) return;
    publishButton.disabled = true;
    updateStatus('Starte Veröffentlichung...');
    try {
      // 1. Hole den aktuellen Commit & Tree von main
      const branch = await githubApi('git/refs/heads/main');
      const latestCommitSha = branch.object.sha;
      const latestCommit = await githubApi(`git/commits/${latestCommitSha}`);
      const baseTreeSha = latestCommit.tree.sha;

      // 2. Erstelle Blob für data.json (mit den aktuellen Änderungen)
      updateStatus('Bereite data.json für Commit vor...');
      const dataContent = JSON.stringify(currentData, null, 2);
      // const encodedDataContent = utf8ToBase64(dataContent); // Base64 für GitHub API
      const dataBlob = await githubApi('git/blobs', {
        method: 'POST',
        body: JSON.stringify({ content: dataContent, encoding: 'utf-8' }) // utf-8 verwenden
      });

      // 3. Erstelle neuen Tree nur mit data.json
      updateStatus('Erstelle Tree für Commit...');
      const newTree = await githubApi('git/trees', {
        method: 'POST',
        body: JSON.stringify({
          base_tree: baseTreeSha,
          tree: [{ path: 'src/content/data.json', mode: '100644', type: 'blob', sha: dataBlob.sha }]
        })
      });

      // 4. Erstelle neuen Commit
      updateStatus('Erstelle Commit...');
      const commit = await githubApi('git/commits', {
        method: 'POST',
        body: JSON.stringify({
          message: `Update feature ${id} details via Editor`, // Spezifischere Commit-Nachricht
          tree: newTree.sha,
          parents: [latestCommitSha]
        })
      });

      // 5. Setze main auf neuen Commit
      updateStatus('Pushe Commit auf main...');
      await githubApi('git/refs/heads/main', {
        method: 'PATCH',
        body: JSON.stringify({ sha: commit.sha })
      });

      updateStatus('Änderungen erfolgreich veröffentlicht!');
      // Setze den aktuellen Zustand als neuen Startpunkt für die History
      history = [JSON.parse(JSON.stringify(currentData))];
      historyIndex = 0;
    } catch (error) {
      console.error('Fehler beim Publish:', error);
      updateStatus(`Fehler beim Publish: ${error.message}`, true);
    }
    publishButton.disabled = false;
    setTimeout(() => updateStatus(''), 5000);
  });

</script>
