## File: src/components/CollectionEditor.svelte
```svelte
<script lang="ts">
let { collection, items } = $props<{
      collection: string;
      items: Array<{ name?: string; title?: string; description: string }>;
    }>();
  
    let isEditMode = $state(typeof window !== 'undefined' && !!sessionStorage.getItem('github_pat'));
    let status = $state('');
  
    function addItem() {
      status = `Füge neuen ${collection}-Eintrag hinzu...`;
      // Placeholder for add logic
      console.log('Adding new item to', collection);
      status = 'Hinzufügen nicht implementiert (Platzhalter).';
    }
  
    function deleteItem(index: number) {
      status = `Lösche ${collection}-Eintrag ${index}...`;
      // Placeholder for delete logic
      console.log('Deleting item at index', index, 'from', collection);
      status = 'Löschen nicht implementiert (Platzhalter).';
    }
  </script>
  
  <div class="collection-editor">
    {#each items as item, index}
      <div class="item">
        <h3>{item.name || item.title || 'Unbenannt'}</h3>
        <p>{item.description}</p>
        {#if isEditMode}
          <button onclick={() => deleteItem(index)}>Löschen</button>
        {/if}
      </div>
    {/each}
    {#if isEditMode}
      <button onclick={addItem}>Neuen {collection} hinzufügen</button>
    {/if}
    {#if status}
      <p>{status}</p>
    {/if}
  </div>
  
  <style>
    .item {
      border: 1px solid #eee;
      padding: 1em;
      margin-bottom: 1em;
    }
  </style>
```

## File: src/components/InlineEditor.svelte
```svelte
<script lang="ts">
let { content, filePath, dataKey } = $props<{
      content: string;
      filePath: string;
      dataKey: string;
    }>();
  
    let isEditMode = $state(typeof window !== 'undefined' && !!sessionStorage.getItem('github_pat'));
    let editedContent = $state(content);
    let status = $state('');
  
    $effect(() => {
      // Update editedContent when prop changes
      editedContent = content;
    });
  
    async function saveChanges() {
      if (!isEditMode) return;
      const pat = typeof window !== 'undefined' ? sessionStorage.getItem('github_pat') : null;
      if (!pat) {
        status = 'Kein PAT vorhanden.';
        return;
      }
  
      status = 'Speichere...';
      try {
        const response = await fetch(`https://api.github.com/repos/knuspermixx/astro-edit-starter/contents/${filePath}`, {
          method: 'GET',
          headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
        });
        const data = await response.json();
        if (!response.ok) throw new Error('Failed to fetch file SHA');
  
        const existingContent = JSON.parse(atob(data.content));
        const keys = dataKey.split('.');
        let current = existingContent;
        for (let i = 0; i < keys.length - 1; i++) {
          current = current[keys[i]];
        }
        current[keys[keys.length - 1]] = editedContent;
  
        const updatedContent = JSON.stringify(existingContent, null, 2);
  
        const putResponse = await fetch(`https://api.github.com/repos/knuspermixx/astro-edit-starter/contents/${filePath}`, {
          method: 'PUT',
          headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
          body: JSON.stringify({
            message: `Update ${filePath} via website`,
            content: btoa(unescape(encodeURIComponent(updatedContent))),
            sha: data.sha,
          }),
        });
  
        status = putResponse.ok ? 'Erfolgreich gespeichert!' : 'Fehler beim Speichern.';
      } catch (error) {
        if (error instanceof Error) {
          status = `Fehler: ${error.message}`;
        } else {
          status = 'Ein unbekannter Fehler ist aufgetreten.';
        }
      }
    }
  </script>
  
  <div
    contenteditable={isEditMode}
    onblur={saveChanges}
    oninput={(e) => (editedContent = e.currentTarget.textContent || '')}
    data-editable={filePath}
    data-key={dataKey}
  >
    {editedContent}
  </div>
  {#if status}
    <p>{status}</p>
  {/if}
```

## File: src/components/MediaEditor.svelte
```svelte
<script lang="ts">
    import { onMount } from 'svelte';
    let { src, filePath } = $props<{
      src: string;
      filePath: string;
    }>();
  
    let isEditMode = $state(false);
    let showUpload = $state(false);
    let status = $state('');
  
    // Only access sessionStorage in the browser
    onMount(() => {
      if (typeof window !== 'undefined') {
        isEditMode = !!sessionStorage.getItem('github_pat');
      }
    });
  
    async function handleUpload(event: Event) {
      const file = (event.target as HTMLInputElement).files?.[0];
      if (!file) return;
  
      status = 'Lade hoch...';
      // Placeholder for GitHub upload logic
      console.log('Uploading file:', file, 'to', filePath);
      status = 'Upload nicht implementiert (Platzhalter).';
    }
  </script>
  
  <div
    role="button"
    tabindex="0"
    class="media-wrapper"
    onmouseenter={() => isEditMode && (showUpload = true)}
    onmouseleave={() => (showUpload = false)}
  >
    <img {src} alt="Media" />
    {#if showUpload}
      <input type="file" accept="image/*" onchange={handleUpload} class="upload-btn" />
    {/if}
  </div>
  {#if status}
    <p>{status}</p>
  {/if}
  
  <style>
    .media-wrapper {
      position: relative;
      display: inline-block;
    }
    .upload-btn {
      position: absolute;
      top: 0;
      left: 0;
      opacity: 0.8;
    }
  </style>
```

## File: src/content/blog/first-post.mdx
```mdx
---
title: 'Erster News-Eintrag'
description: 'Dies ist unser erster Beitrag.'
pubDate: '2023-01-01'
heroImage: '/blog-placeholder.jpg'
---

Dies ist der Inhalt des ersten News-Beitrags.

```

## File: src/content/blog/second-post.mdx
```mdx
---
title: 'Zweiter News-Eintrag'
description: 'Ein weiterer Beitrag.'
pubDate: '2023-01-02'
heroImage: '/blog-placeholder.jpg'
---

Hier ist der Inhalt des zweiten Beitrags.
```

## File: src/content/config.json
```json
{
    "hero": {
      "title": "Willkommen bei uns",
      "subtitle": "Ihr lokales Unternehmen für beste Dienstleistungen"
    },
    "about": {
      "title": "Über uns",
      "description": "Wir sind ein lokales Unternehmen, das sich der Qualität verschrieben hat."
    },
    "services": [
      {
        "name": "Dienstleistung 1",
        "description": "Beschreibung der ersten Dienstleistung."
      },
      {
        "name": "Dienstleistung 2",
        "description": "Beschreibung der zweiten Dienstleistung."
      }
    ]
  }

  
```

## File: src/layouts/BlogPost.astro
```astro
---
import '../styles/global.css';

const { title, description, pubDate, heroImage } = Astro.props;
const slug = Astro.url.pathname.split('/').filter(Boolean).pop() || '';
---

<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
  </head>
  <body class={sessionStorage.getItem('github_pat') ? 'edit-mode' : ''}>
    <main data-slug={slug}>
      <article>
        {heroImage && <img src={heroImage} alt="Hero" />}
        <h1 data-editable={`content/blog/${slug}.mdx`} data-key="title">{title}</h1>
        <p>{pubDate.toString()}</p>
        <div class="edit-controls">
          <button id="publish">Veröffentlichen</button>
          <button id="logout">Ausloggen</button>
          <div id="status"></div>
        </div>
        <div class="content" data-editable={`content/blog/${slug}.mdx`} data-key="body">
          <slot />
        </div>
      </article>
    </main>
    <script type="module">
      const pat = sessionStorage.getItem('github_pat');
      const editControls = document.querySelector('.edit-controls');
      const contentDiv = document.querySelector('.content');
      const publishButton = document.getElementById('publish');
      const logoutButton = document.getElementById('logout');
      const statusDiv = document.getElementById('status');
      const mainEl = document.querySelector('main');
      const slug = mainEl ? mainEl.getAttribute('data-slug') : '';

      if (pat) {
        editControls.style.display = 'block';
        contentDiv.setAttribute('contenteditable', 'true');

        logoutButton.addEventListener('click', () => {
          sessionStorage.removeItem('github_pat');
          window.location.reload();
        });

        publishButton.addEventListener('click', async () => {
          if (!slug) {
            statusDiv.textContent = 'Fehler: Slug ist leer.';
            return;
          }
          const content = contentDiv.innerHTML;
          const filePath = `src/content/blog/${slug}.mdx`;
          statusDiv.textContent = 'Veröffentliche...';

          try {
            const response = await fetch(`https://api.github.com/repos/knuspermixx/astro-edit-starter/contents/${filePath}`, {
              method: 'GET',
              headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
            });
            const data = await response.json();
            if (!response.ok) throw new Error('Failed to fetch file SHA');

            const existingContent = atob(data.content.replace(/\n/g, ''));
            const frontmatterMatch = existingContent.match(/^(---[\s\S]*?---)/);
            const frontmatter = frontmatterMatch ? frontmatterMatch[1] : '';
            const updatedContent = `${frontmatter}\n${content}`;

            const putResponse = await fetch(`https://api.github.com/repos/knuspermixx/astro-edit-starter/contents/${filePath}`, {
              method: 'PUT',
              headers: { Authorization: `token ${pat}`, Accept: 'application/vnd.github.v3+json' },
              body: JSON.stringify({
                message: `Update ${slug} via website`,
                content: btoa(unescape(encodeURIComponent(updatedContent))),
                sha: data.sha,
              }),
            });

            if (putResponse.ok) {
              statusDiv.textContent = 'Erfolgreich veröffentlicht!';
            } else {
              statusDiv.textContent = 'Fehler beim Veröffentlichen.';
            }
          } catch (error) {
            statusDiv.textContent = 'Fehler: ' + error.message;
          }
        });
      } else {
        editControls.style.display = 'none';
        contentDiv.removeAttribute('contenteditable');
      }
    </script>
    <style>
      .edit-controls {
        margin: 1em 0;
      }
      .content {
        padding: 1em;
      }
    </style>
  </body>
</html>
```

## File: src/pages/blog/[...slug].astro
```astro
---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.id },
    props: post,
  }));
}

const post = Astro.props;
const { Content } = await post.render();
---

<BlogPost {...post.data}>
  <Content />
</BlogPost>

```

## File: src/pages/blog/index.astro
```astro
---
import '../../styles/global.css';
import { getCollection } from 'astro:content';

const posts = await getCollection('blog');
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <title>News</title>
  </head>
  <body>
    <main>
      <h1>News-Beiträge</h1>
      <ul>
        {posts.map((post) => (
          <li>
            <a href={`astro-edit-starter/blog/${post.id}`}>{post.data.title}</a>
          </li>
        ))}
      </ul>
    </main>
  </body>
</html>

```

## File: src/pages/login.astro
```astro
---
import '../styles/global.css';
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <title>Login</title>
  </head>
  <body>
    <main>
      <div class="login-container">
        <h1>Login</h1>
        <p>Geben Sie Ihren GitHub Personal Access Token ein.</p>
        <input type="password" id="pat" placeholder="GitHub PAT" />
        <button id="submit">Einloggen</button>
        <div id="error" class="error"></div>
      </div>
    </main>
    <script type="module">
      const patInput = document.getElementById('pat');
      const submitButton = document.getElementById('submit');
      const errorDiv = document.getElementById('error');

      submitButton.addEventListener('click', async () => {
        const pat = patInput.value.trim();
        if (!pat) {
          errorDiv.textContent = 'Bitte geben Sie einen Token ein.';
          return;
        }

        try {
          const response = await fetch('https://api.github.com/user', {
            headers: { Authorization: `token ${pat}` },
          });
          if (response.ok) {
            sessionStorage.setItem('github_pat', pat);
            window.location.href = '/astro-edit-starter';
          } else {
            errorDiv.textContent = 'Ungültiger PAT.';
          }
        } catch (error) {
          errorDiv.textContent = 'Fehler bei der Verbindung.';
        }
      });
    </script>
    <style>
      .login-container {
        max-width: 400px;
        margin: 2em auto;
        padding: 1em;
        text-align: center;
      }
      .error {
        color: red;
        margin-top: 1em;
      }
    </style>
  </body>
</html>

```

## File: src/pages/index.astro
```astro
---
import '../styles/global.css';
import InlineEditor from '../components/InlineEditor.svelte';
import CollectionEditor from '../components/CollectionEditor.svelte';
import MediaEditor from '../components/MediaEditor.svelte';
import { getCollection } from 'astro:content';

const config = await import('../content/config.json');
const posts = await getCollection('blog');
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <title>Lokales Unternehmen</title>
  </head>
  <body>
    <script>
      if (typeof window !== 'undefined' && sessionStorage.getItem('github_pat')) {
        document.body.classList.add('edit-mode');
      }
    </script>
    <main>
      <section>
        <h1>
          <InlineEditor content={config.hero.title} filePath="src/content/config.json" dataKey="hero.title" client:load />
        </h1>
        <p>
          <InlineEditor content={config.hero.subtitle} filePath="src/content/config.json" dataKey="hero.subtitle" client:load />
        </p>
        <MediaEditor src="/hero-placeholder.jpg" filePath="src/content/hero.jpg" client:load />
      </section>

      <section>
        <h2>
          <InlineEditor content={config.about.title} filePath="src/content/config.json" dataKey="about.title" client:load />
        </h2>
        <p>
          <InlineEditor content={config.about.description} filePath="src/content/config.json" dataKey="about.description" client:load />
        </p>
      </section>

      <section>
        <h2>Dienstleistungen</h2>
        <CollectionEditor collection="services" items={config.services} client:load />
      </section>

      <section>
        <h2>News</h2>
        <CollectionEditor collection="blog" items={posts} client:load />
      </section>
    </main>
  </body>
</html>

```

## File: src/styles/global.css
```css
body {
  font-family: Arial, sans-serif;
  margin: 0;
  padding: 0;
}

.edit-mode [data-editable] {
  border: 1px dashed #ccc;
  padding: 0.5em;
  cursor: text;
}

.edit-mode .collection-editor button {
  display: inline-block;
}

.collection-editor button {
  display: none;
}

section {
  padding: 1em;
}


```

## File: astro.config.mjs
```javascript
// @ts-check
import { defineConfig } from 'astro/config';

import svelte from '@astrojs/svelte';

// https://astro.build/config
export default defineConfig({
  site: 'https://knuspermixx.github.io',
  base: 'astro-edit-starter',
  integrations: [svelte()],
});
```

## File: package.json
```json
{
  "name": "astro-edit-starter",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "build": "astro build",
    "preview": "astro preview",
    "astro": "astro"
  },
  "dependencies": {
    "@astrojs/svelte": "^7.0.10",
    "astro": "^5.7.3",
    "svelte": "^5.27.2",
    "typescript": "^5.8.3"
  },
  "devDependencies": {
    "@types/bun": "^1.2.10"
  },
  "packageManager": "pnpm@10.8.1+sha512.c50088ba998c67b8ca8c99df8a5e02fd2ae2e2b29aaf238feaa9e124248d3f48f9fb6db2424949ff901cffbb5e0f0cc1ad6aedb602cd29450751d11c35023677"
}

```

## File: svelte.config.js
```javascript
import { vitePreprocess } from '@astrojs/svelte';

export default {
	preprocess: vitePreprocess(),
}

```

